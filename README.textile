h1. Java Tools

Ruby wrappers for javac and jar that don't just exec.

Ant is a nice tool for writing Java build scripts, but Rake is nicer. The only thing missing from Rake is a way to run javac and jar, and although it's easy to run these as shell scripts you have to wait for the JVM to start. In combination with JRuby this gem lets you run javac and jar in your Rake scripts without exec'ing.

Ant is a good tool for some use cases, but it's extremely verbose and it's declarative nature gets in the way even when trying to solve pretty simple problems. Rake is much better in many ways, but it lacks support for running @javac@ and @jar@. Sure, you can run them like any other shell command, but that means waiting for the JVM to start for each call. These wrappers use the programmatic interface to call @javac@ and uses Java's @ZipOutputStream@ to create JAR files, just like Ant does. You only have to wait for one JVM to start up, and using JRuby's Nailgun support, you even only have to do that once.

    task :compile do
	  javac(FileList['src/**/*.java']) do |conf|
	    conf.destination = 'build'
	    conf.verbose     = true
	  end
	end
	
Even though the wrappers are intended mainly to be used in Rake scripts they have no dependencies on Rake, you can use them in any code running in JRuby.

Because they are not dependent on Rake the wrappers are not written as Rake tasks. You write a regular Rake @task@ block and call @javac@ or @jar@ inside of it like other commands such as @cp@, @rm@ or @sh@. I don't particularly like the way @SpecTask@ or @TestTask@ replace the @task@ declaration, it removes some of the DSL illusion, and because of that there's no @JavacTask@ nor @JarTask@.

h2. Upcomming

Even though the whole rationale behind Java Tools is to avoid exec it wouldn't be much effort to support non-JRuby runtimes.